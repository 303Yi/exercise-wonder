<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wonder.exercise.dao.appointmentMapper">
  <resultMap id="BaseResultMap" type="com.wonder.exercise.entity.appointment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="request_user_id" jdbcType="INTEGER" property="requestUserId" />
    <result column="requested_user_id" jdbcType="INTEGER" property="requestedUserId" />
    <result column="appointment_time" jdbcType="TIMESTAMP" property="appointmentTime" />
    <result column="request_time" jdbcType="TIMESTAMP" property="requestTime" />
    <result column="accept" jdbcType="INTEGER" property="accept" />
    <result column="del_flag" jdbcType="INTEGER" property="delFlag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, request_user_id, requested_user_id, appointment_time, request_time, accept,
    del_flag
  </sql>
  <select id="selectByRequestedUserId" parameterType="java.lang.Integer"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include>
    from exercise_appointment
    where requested_user_id = #{id,jdbcType=INTEGER} order by appointment_time DESC
  </select>
  <select id="isExist" parameterType="com.wonder.exercise.entity.appointment"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include>
    from exercise_appointment
    where request_user_id=#{requestUserId} and requested_user_id = #{requestedUserId}
    and appointment_time=#{appointmentTime}
  </select>
  <select id="selectByRequestUserId" parameterType="java.lang.Integer"  resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include>
    from exercise_appointment
    where request_user_id = #{id,jdbcType=INTEGER} order by appointment_time DESC
  </select>
  <select id="selectByExample" parameterType="com.wonder.exercise.entity.appointmentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exercise_appointment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from exercise_appointment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from exercise_appointment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.wonder.exercise.entity.appointmentExample">
    delete from exercise_appointment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.wonder.exercise.entity.appointment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into exercise_appointment (request_user_id, requested_user_id, appointment_time, 
      request_time, accept, del_flag
      )
    values (#{requestUserId,jdbcType=INTEGER}, #{requestedUserId,jdbcType=INTEGER}, #{appointmentTime,jdbcType=TIMESTAMP}, 
      #{requestTime,jdbcType=TIMESTAMP}, #{accept,jdbcType=INTEGER}, #{delFlag,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.wonder.exercise.entity.appointment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into exercise_appointment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="requestUserId != null">
        request_user_id,
      </if>
      <if test="requestedUserId != null">
        requested_user_id,
      </if>
      <if test="appointmentTime != null">
        appointment_time,
      </if>
      <if test="requestTime != null">
        request_time,
      </if>
      <if test="accept != null">
        accept,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="requestUserId != null">
        #{requestUserId,jdbcType=INTEGER},
      </if>
      <if test="requestedUserId != null">
        #{requestedUserId,jdbcType=INTEGER},
      </if>
      <if test="appointmentTime != null">
        #{appointmentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="requestTime != null">
        #{requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accept != null">
        #{accept,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wonder.exercise.entity.appointmentExample" resultType="java.lang.Long">
    select count(*) from exercise_appointment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update exercise_appointment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.requestUserId != null">
        request_user_id = #{record.requestUserId,jdbcType=INTEGER},
      </if>
      <if test="record.requestedUserId != null">
        requested_user_id = #{record.requestedUserId,jdbcType=INTEGER},
      </if>
      <if test="record.appointmentTime != null">
        appointment_time = #{record.appointmentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.requestTime != null">
        request_time = #{record.requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accept != null">
        accept = #{record.accept,jdbcType=INTEGER},
      </if>
      <if test="record.delFlag != null">
        del_flag = #{record.delFlag,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update exercise_appointment
    set id = #{record.id,jdbcType=INTEGER},
      request_user_id = #{record.requestUserId,jdbcType=INTEGER},
      requested_user_id = #{record.requestedUserId,jdbcType=INTEGER},
      appointment_time = #{record.appointmentTime,jdbcType=TIMESTAMP},
      request_time = #{record.requestTime,jdbcType=TIMESTAMP},
      accept = #{record.accept,jdbcType=INTEGER},
      del_flag = #{record.delFlag,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.wonder.exercise.entity.appointment">
    update exercise_appointment
    <set>
      <if test="requestUserId != null">
        request_user_id = #{requestUserId,jdbcType=INTEGER},
      </if>
      <if test="requestedUserId != null">
        requested_user_id = #{requestedUserId,jdbcType=INTEGER},
      </if>
      <if test="appointmentTime != null">
        appointment_time = #{appointmentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="requestTime != null">
        request_time = #{requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="accept != null">
        accept = #{accept,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wonder.exercise.entity.appointment">
    update exercise_appointment
    set request_user_id = #{requestUserId,jdbcType=INTEGER},
      requested_user_id = #{requestedUserId,jdbcType=INTEGER},
      appointment_time = #{appointmentTime,jdbcType=TIMESTAMP},
      request_time = #{requestTime,jdbcType=TIMESTAMP},
      accept = #{accept,jdbcType=INTEGER},
      del_flag = #{delFlag,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>